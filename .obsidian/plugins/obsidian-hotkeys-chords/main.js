/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => HotkeysChordPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var HotKey = class {
  constructor(dict) {
    this.meta = dict.meta;
    this.shift = dict.shift;
    this.ctrl = dict.ctrl;
    this.alt = dict.alt;
    this.key = dict.key.toLowerCase();
  }
  toString() {
    var name = "";
    if (this.alt == true) {
      name += "A-";
    }
    if (this.ctrl == true) {
      name += "C-";
    }
    if (this.meta == true) {
      name += "M-";
    }
    if (this.shift == true) {
      name += "S-";
    }
    return name + this.key;
  }
};
var Chord = class {
  constructor(dict) {
    this.sequence = dict.sequence;
    this.command = dict.command;
  }
  checkPrefix(other) {
    for (const [index, hotkey] of this.sequence.entries()) {
      let otherkey = other[index];
      if (otherkey === void 0) {
        return "YES";
      }
      if (hotkey.meta != otherkey.meta || hotkey.shift != otherkey.shift || hotkey.ctrl != otherkey.ctrl || hotkey.alt != otherkey.alt || hotkey.key != otherkey.key) {
        return "NO";
      }
    }
    return "FULL";
  }
  chordToString() {
    return this.sequence.map((hk) => hk.toString()).join(" ");
  }
};
var DEFAULT_SETTINGS = {
  hotkeys: [
    new Chord({ sequence: [
      new HotKey({ key: "x", meta: false, shift: false, ctrl: true, alt: false }),
      new HotKey({ key: "3", meta: false, shift: false, ctrl: false, alt: false })
    ], command: "workspace:split-vertical" }),
    new Chord({ sequence: [
      new HotKey({ key: "x", meta: false, shift: false, ctrl: true, alt: false }),
      new HotKey({ key: "2", meta: false, shift: false, ctrl: false, alt: false })
    ], command: "workspace:split-horizontal" })
  ]
};
var HotkeysChordPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.handleKeyDown = (event, cm) => {
      if (event.key === "Shift" || event.key === "Meta" || event.key === "Control" || event.key == "Alt") {
        console.debug("Skipping meta key: " + event.key);
        return;
      }
      let hotkey = new HotKey({
        key: event.key,
        shift: event.shiftKey,
        meta: event.metaKey,
        ctrl: event.ctrlKey,
        alt: event.altKey
      });
      this.currentseq.push(hotkey);
      var partialMatch = false;
      for (let chord of this.settings.hotkeys) {
        let result = chord.checkPrefix(this.currentseq);
        if (result == "FULL") {
          this.app.commands.executeCommandById(chord.command);
          event.preventDefault();
          event.stopPropagation();
          partialMatch = false;
          break;
        } else if (result == "YES") {
          partialMatch = true;
        }
      }
      if (this.currentseq.length > 1 || partialMatch) {
        event.preventDefault();
        event.stopPropagation();
      }
      if (!partialMatch) {
        this.currentseq = [];
      }
      this.updateStatusBar();
    };
  }
  onload() {
    return __async(this, null, function* () {
      var data = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
      data.hotkeys = data.hotkeys.map((chord) => new Chord({
        command: chord.command,
        sequence: chord.sequence.map((hotkey) => new HotKey(hotkey))
      }));
      this.settings = Object.assign({}, DEFAULT_SETTINGS, data);
      this.statusbar = this.addStatusBarItem();
      this.currentseq = [];
      this.updateStatusBar();
      this.addSettingTab(new HotkeysChordPluginSettingsTab(this.app, this));
      window.addEventListener("keydown", this.handleKeyDown, { capture: true });
    });
  }
  onunload() {
    return __async(this, null, function* () {
      window.removeEventListener("keydown", this.handleKeyDown);
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  updateStatusBar() {
    var chord = "None";
    if (this.currentseq.length > 0) {
      chord = this.currentseq.map((hk) => hk.toString()).join(" ");
    }
    this.statusbar.setText("Chord: " + chord);
  }
};
var HotkeysChordPluginSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.generateCommandList = (app) => {
      const commands = [];
      for (const [key, value] of Object.entries(app.commands.commands)) {
        commands.push({ name: value.name, id: value.id });
      }
      return commands;
    };
    this.plugin = plugin;
  }
  display() {
    const commands = this.generateCommandList(this.app);
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Hotkeys Chord Plugin - Settings" });
    containerEl.createEl("p", { text: "Click on the buttons to change chords. Click again to end chord composition." });
    containerEl.createEl("h3", { text: "Existing Hotkeys Chords" });
    this.plugin.settings.hotkeys.forEach((chord, index) => {
      new ChordSetting(containerEl, "existing", chord, commands, (state) => __async(this, null, function* () {
        if (state === void 0) {
          this.plugin.settings.hotkeys.splice(index, 1);
          yield this.plugin.saveSettings();
        } else {
          this.plugin.settings.hotkeys[index] = state;
          yield this.plugin.saveSettings();
        }
        this.display();
      }));
    });
    containerEl.createEl("h3", { text: "Create new Chord" });
    var newchord;
    if (newchord == void 0)
      newchord = new Chord({ sequence: [], command: "invalid-placeholder" });
    new ChordSetting(containerEl, "new", newchord, commands, (state) => __async(this, null, function* () {
      this.plugin.settings.hotkeys.push(state);
      yield this.plugin.saveSettings();
      newchord = new Chord({ sequence: [], command: "invalid-placeholder" });
      this.display();
    }));
  }
};
var ChordSetting = class extends import_obsidian.Setting {
  constructor(container, ctype, chord, commands, cb) {
    super(container);
    this.ctype = ctype;
    this.chord = chord;
    this.cb = cb;
    this.commands = commands;
    this.display();
  }
  display() {
    let cmdname = `${this.chord.command}`;
    for (let command of this.commands) {
      if (command.id == this.chord.command)
        cmdname = command.name;
    }
    this.clear().addButton((btn) => {
      var state = "inactive";
      var stopper = void 0;
      var text = "";
      if (this.chord.sequence.length > 0) {
        text = this.chord.chordToString();
      } else {
        text = "Choose a Chord";
      }
      btn.setButtonText(text).setTooltip("Change the Chord").onClick(() => {
        if (state === "inactive") {
          state = "active";
          btn.setButtonText("Type the Chord");
          stopper = new ChordCapture((sequence, final) => {
            if (final) {
              this.chord.sequence = sequence;
              if (this.ctype == "existing")
                this.cb(this.chord);
              else
                this.display();
            } else {
              btn.setButtonText("*** " + sequence.map((hk) => hk.toString()).join(" ") + " ***");
            }
          });
        } else {
          stopper();
          state = "inactive";
        }
      });
    }).addDropdown((dropdown) => {
      dropdown.addOption("invalid-placeholder", "Select a Command");
      this.commands.forEach((cmd) => dropdown.addOption(cmd.id, cmd.name));
      dropdown.onChange((newcmd) => {
        this.chord.command = newcmd;
        if (this.ctype == "existing")
          this.cb(this.chord);
        else
          this.display();
      });
      dropdown.setValue(this.chord.command);
    }).addExtraButton((btn) => {
      if (this.ctype == "existing") {
        btn.setIcon("cross").setTooltip("Delete shortcut").onClick(() => {
          this.cb(void 0);
        });
      } else {
        btn.setIcon("enter").setTooltip("Add shortcut").onClick(() => {
          if (this.chord.command === "invalid-placeholder" || this.chord.sequence.length == 0) {
            new import_obsidian.Notice("Please choose both a command and a chord!!!");
          } else {
            this.cb(this.chord);
          }
        });
      }
    });
  }
};
function ChordCapture(cb) {
  var sequence = [];
  var keydownhandler = (event) => {
    if (["Shift", "Meta", "Alt", "Control"].contains(event.key))
      return;
    event.preventDefault();
    event.stopPropagation();
    if (event.key === "Escape") {
      document.removeEventListener("keydown", keydownhandler);
      cb(sequence, true);
    } else {
      let hotkey = new HotKey({
        key: event.key,
        meta: event.metaKey,
        ctrl: event.ctrlKey,
        alt: event.altKey,
        shift: event.shiftKey
      });
      sequence.push(hotkey);
      cb(sequence, false);
    }
    ;
  };
  var stopper = () => {
    document.removeEventListener("keydown", keydownhandler);
    cb(sequence, true);
  };
  document.addEventListener("keydown", keydownhandler);
  return stopper;
}
//# sourceMappingURL=data:application/json;base64,
